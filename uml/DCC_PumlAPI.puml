@startuml
!theme reddress-darkgreen

frame "Class Conception Diagram of our API"{

package pumlFromJava {


    package diagrams {

        interface IPumlDiagram {
            + getScheme(environment : DocletEnvironment) : String
        }

        class PumlBasis implements IPumlDiagram { /' week 1 '/
            + <<Create>> PumlBasis()
            + getScheme(environment : DocletEnvironment) : String
        }

        class PumlDCA implements IPumlDiagram {
            + <<Create>> PumlDCA()
            + getScheme(environment : DocletEnvironment) : String
        }

        class PumlDCC implements IPumlDiagram {
            + <<Create>> PumlDCC()
            + getScheme(environment : DocletEnvironment) : String
        }
    }


    package doclets {

        package options {

            class OutOption implements jdk.javadoc.doclet.Doclet_Option {
                - NameFile : String
                + <<Create>> OutOption()
                + getArgumentCount() : Integer
                + getDescription() : String
                + getFileName() : String
                + getKind() : String
                + getNames() : String[*]
                + getParameters() : String
                + process(String, String[*]) : boolean
            }

            class PathOption implements jdk.javadoc.doclet.Doclet_Option {
                - path : String
                + <<Create>> PathOption()
                + getPath() : Integer
                + getArgumentCount() : Integer
                + getDescription() : String
                + getKind() : String
                + getNames() : String[*]
                + getParameters() : String
                + process(String, String[*]) : boolean
            }

            class TypeOption implements jdk.javadoc.doclet.Doclet_Option {
                - type : String
                + <<Create>> TypeOption()
                + getType() : String
                + getArgumentCount() : Integer
                + getDescription() : String
                + getNames() : String[*]
                + getParameters() : String
                + process(String, String[*]) : boolean
            }
        }

        class FirstDoclet implements jdk.javadoc.doclet.Doclet {
            + <<Create>> FirstDoclet()
            + getName(element : Element)
            + getSupportedOptions() : Options[*]
            + getSupportedSourceVersion() : SourceVersion
            + init(locale : Locale, reporter : Reporter)
            + run(environment : DocletEnvironment) : boolean
        }

        class PumlDoclet implements jdk.javadoc.doclet.Doclet {
           - oOout : OutOption
           - oPath : OutPath
           - oType : TypeOption
           + <<Create>> PumlDoclet()
           + getName(element : Element)
           + getSupportedOptions() : Options[*]
           + getSupportedSourceVersion() : SourceVersion
           + init(locale : Locale, reporter : Reporter)
           + run(environment : DocletEnvironment) : boolean
           - generateDCA(environment : DocletEnvironment)
           - generateDCC(environment : DocletEnvironment)
        }
    }


    package generators {
            class Java2Puml {
                + main(String[*])
            }
    }


    package translators {

        package pumlMarker {

            interface IPumlMarker{
               +umlStart() : String
               +umlEnd() : String
            }

            class Marker implements IPumlMarker {
                + <<Create>> Marker()
                + options_strictUml() : String
                + umlStart() : String
                + umlEnd() : String
            }
        }


        package pumlObjects {

            interface PumlObjectSpecies{
                + getName(element : Element) : String
                + getContent(element : Element) : String
                + getTranslation(element : Element) : String
                + open()
                + close()
            }

            interface InheritableObject{
                + getInheritance(element : Element) : String
            }

            abstract PumlObject implements PumlObjectSpecies{
                + {abstract} getName(element : Element) : String
                + {abstract} getContent(element : Element) : String
                + {abstract} getTranslation(element : Element) : String
                + open()
                + close()
                + getLineBreaker() : String
                # isNotFromJava(typeMirror : TypeMirror) : Boolean
                # isPrimitiveType(typeMirror : TypeMirror) : boolean
            }

            abstract PumlClasses extends PumlObject implements InheritableObject {
                 + {abstract} ^getContent(element : Element) : String
                 + ^getName(element : Element) : String
                 + ^getTranslation(element : Element) : String
                 + getInheritance(element : Element) : String
                 + getUses(element : Element) : String
                 # {abstract} translate_fields(element : Element) : String
                 # {abstract} translate_methods(element : Element) : String
                 # getExtends(typeElement : TypeElement) : String
                 # getImplements(typeElement : TypeElement) : String
                 # getMethodsUsage(typeElement : TypeElement) : String
                 # getAggregationsCompositions(typeElement : TypeElement) : String
            }

            class PumlClass extends PumlClasses {
                - visibilityViewer : VisibilityViewer
                + <<Create>> PumlClass()
                + ^getContent(element : Element) : String
                # ^translate_fields(element : Element) : String
                # ^translate_methods(element : Element) : String
            }

             class PumlNonVisibleClass extends PumlClasses{
                + <<Create>> PumlInterface()
                + ^getContent(element : Element) : String
                # ^translate_fields(element : Element) : String
                # ^translate_methods(element : Element) : String
            }

            class PumlEnum extends PumlObject {
                + <<Create>> PumlEnum()
                + ^getName(element : Element) : String
                + ^getContent(element : Element) : String
            }

            class PumlInterface extends PumlObject implements InheritableObject {
                 + <<Create>> PumlInterface()
                 + ^getName(element : Element) : String
                 + ^getContent(element : Element) : String
                 + getInheritance(element : Element) : String
            }

            class PumlPackage extends PumlObject {
                + <<Create>> PumlPackage()
                + ^getName(element : Element) : String
                + ^getContent(element : Element) : String
            }

            class VisibilityViewer implements IVisibilityViewer {
                + getVisibility(annotationMirror : AnnotationMirror) : String
            }
        }
    }


    package writers {

        interface WriterSpecies{
            + open()
            + write(text : String)
            + close()
        }

        class Writer implements WriterSpecies{
            - filepath : String
            - pw : PrintWriter
            + <<Create>> Writer(filename : String)
            + <<Create>> Writer(filepath : String, filename : String)
            + open()
            + write(text : String)
            + close()
            - createFile()
            - createDirectoriesPath()
            - links()
        }
    }
}

FirstDoclet <-d- PumlBasis : <<Use>>
PumlDoclet <-d- PumlDCA : <<Use>>
PumlDoclet <-d- PumlDCC : <<Use>>
PumlDoclet <-d- PathOption : <<Use>>
PumlDoclet <-d- TypeOption : <<Use>>
PumlDoclet <-d- OutOption : <<Use>>
PumlDoclet <-d- Marker : <<Use>>
Java2Puml <-d- PumlDoclet : <<Use>>
PumlDCA <-d- Marker : <<Use>>
PumlDCA <-d- PumlPackage : <<Use>>
PumlDCA <-d- PumlInterface : <<Use>>
PumlDCA <-d- PumlEnum : <<Use>>
PumlDCA <-d- PumlNonVisibleClass : <<Use>>
PumlDCC <-d- Marker : <<Use>>
PumlDCC <-d- PumlPackage : <<Use>>
PumlDCC <-d- PumlInterface : <<Use>>
PumlDCC <-d- PumlEnum : <<Use>>
PumlDCC <-d- PumlClass : <<Use>>
VisibilityViewer <-d- PumlClass : <<Use>>
Writer <-d- java.io.PrintWriter : <<Use>>


@enduml

