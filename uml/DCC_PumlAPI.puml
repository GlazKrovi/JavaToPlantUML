@startuml
!theme reddress-darkgreen

package jdk.javadoc.doclet {
    interface Doclet
    interface Doclet_Option
}



package pumlFromJava {


    package diagrams {

        interface IPumlDiagram {
            getScheme(environment : DocletEnvironment) : String
        }

        class PumlBasis implements IPumlDiagram { /' week 1 '/
            + <<Create>> PumlBasis()
            + getScheme(environment : DocletEnvironment) : String
        }

        class PumlDCA implements IPumlDiagram {
            + <<Create>> PumlDCA()
            getScheme(environment : DocletEnvironment) : String
        }

        class PumlDCC implements IPumlDiagram {
            + <<Create>> PumlDCC()
            + getScheme(environment : DocletEnvironment) : String
        }
    }


    package doclets {

        package options {

            class OutOption implements jdk.javadoc.doclet.Doclet_Option {
                NameFile : String
                + <<Create>> OutOption()
                getArgumentCount() : Integer
                getDescription() : String
                getFileName() : String
                getKind() : String
                getNames() : String[*]
                getParameters() : String
                process(String, String[*]) : boolean
            }

            class PathOption implements jdk.javadoc.doclet.Doclet_Option {
                path : String
                + <<Create>> PathOption()
                getPath() : Integer
                getArgumentCount() : Integer
                getDescription() : String
                getKind() : String
                getNames() : String[*]
                getParameters() : String
                process(String, String[*]) : boolean
            }

            class TypeOption implements jdk.javadoc.doclet.Doclet_Option {
                type : String
                + <<Create>> TypeOption()
                getType() : String
                getArgumentCount() : Integer
                getDescription() : String
                getNames() : String[*]
                getParameters() : String
                process(String, String[*]) : boolean
            }
        }

        class FirstDoclet implements jdk.javadoc.doclet.Doclet {
            + <<Create>> FirstDoclet()
            + getName(element : Element)
            + getSupportedOptions() : Options[*]
            + getSupportedSourceVersion() : SourceVersion
            + init(locale : Locale, reporter : Reporter)
            + run(environment : DocletEnvironment) : boolean
        }

        class PumlDoclet implements jdk.javadoc.doclet.Doclet {
           - oOout : OutOption
           - oPath : OutPath
           - oType : TypeOption
           + + <<Create>> PumlDoclet()
           + getName(element : Element)
           + getSupportedOptions() : Options[*]
           + getSupportedSourceVersion() : SourceVersion
           + init(locale : Locale, reporter : Reporter)
           + run(environment : DocletEnvironment) : boolean
           - generateDCA(environment : DocletEnvironment)
           - generateDCC(environment : DocletEnvironment)
        }
    }


    package generators {
            class Java2Puml {
                + main(String[*])
            }
    }


    package translators {

        package pumlMarker {

            interface IPumlMarker{
               +options_strictUml() : String
               +umlStart() : String
               +umlEnd() : String
            }

            class Marker implements IPumlMarker {
                + <<Create>> Marker()
                + options_strictUml() : String
                + umlStart() : String
                + umlEnd() : String
            }
        }


        package pumlObjects {

            interface IPumlObject{
                + getName(element : Element) : String
                + getContent(element : Element) : String
                + getLineBreaker() : String
                + getTranslation() : String
                + is_primitive(typeMirror : TypeMirror) : boolean
                + open()
                + close()
            }

            abstract APumlObject implements IPumlObject{
                + {abstract} getName(element : Element) : String
                + {abstract} getContent(element : Element) : String
                + getLineBreaker() : String
                + getTranslation() : String
                + is_primitive(typeMirror : TypeMirror) : boolean
                + open()
                + close()
            }

            abstract APumlClass extends APumlObject {
                 + getName(element : Element) : String
                 + getContent(element : Element) : String
            }

            class PumlClass extends APumlClass {
                - visibilityViewer : VisibilityViewer
                + <<Create>> PumlClass()
                + getName(element : Element) : String
                + getContent(element : Element) : String
                - translate_field(element : Element) : String
                - translate_method(element : Element) : String
            }

            class PumlEnum extends APumlObject {
                + <<Create>> PumlEnum()
                + getName(element : Element) : String
                + getContent(element : Element) : String
            }

            class PumlInterface extends APumlObject {
                 + <<Create>> PumlInterface()
                 + getName(element : Element) : String
                 + getContent(element : Element) : String
            }

            class PumlNonVisibleClass extends APumlClass{
                + <<Create>> PumlInterface()
                + getName(element : Element) : String
                + getContent(element : Element) : String
                - translate_field(element : Element) : String
                - translate_method(element : Element) : String
            }

            class PumlPackage extends APumlObject {
                + <<Create>> PumlPackage()
                + getName(element : Element) : String
                + getContent(element : Element) : String
            }
        }


        package visibilityViewer {

            interface IVisibilityViewer{
                + getVisibility(annotationMirror : AnnotationMirror) : String
            }

            class VisibilityViewer implements IVisibilityViewer {
                + getVisibility(annotationMirror : AnnotationMirror) : String
            }
        }
    }


    package writers {

        interface IWriter{
            + open()
            + write(text : String)
            + close()
        }

        class Write implements IWriter{
            - filepath : String
            - pw : PrintWriter
            + <<Create>> Writer(filename : String)
            + <<Create>> Writer(filepath : String, filename : String)
            + open()
            + write(text : String)
            + close()
            - createFile()
            - createDirectoriesPath()
            - links()
        }
    }
}

@enduml

