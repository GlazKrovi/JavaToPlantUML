@startuml
'https://plantuml.com/class-diagram
package javax.lang.model.element{
interface Element <<interface>> {
+asType() : TypeMirror
+equals(obj : Object) : boolean
+getEnclosedElements() : List<? extends Element>
+getEnclosingElement() : Element
+getKind() : ElementKind
+getModifiers() : Set<Modifier>
+getSimpleName() : Name
+hashCode() : int
}

enum ElementKind <<enum>>{
PACKAGE
MODULE
ANNOTATION_TYPE
CLASS
ENUM
INTERFACE
RECORD
ENUM_CONSTANT
EXCEPTION_PARAMETER
FIELD
LOCAL_VARIABLE
PARAMETER
RESOURCE_VARIABLE
BINDING_VARIABLE
CONSTRUCTOR
INSTANCE_INIT
METHOD
STATIC_INIT
TYPE_PARAMETER
RECORD_COMPONENT
}

interface Name <<interface>>{
+contentEquals(cs CharSequence) : boolean
+equals(obj Object ) : boolean
+hashCode() : int
}

interface ExecutableElement <<interface>> extends Parameterizable{
+asType() : TypeMirror
+getDefaultValue() : AnnotationValue
+getEnclosingElement() : Element
+getParameters() : List<? extends VariableElement>
+getReceiverType() : TypeMirror
+getReturnType() : TypeMirror
+getSimpleName() : Name
+getThrownTypes() : List<? extends TypeMirror>
+getTypeParameters() : List<? extends TypeParameterElement>
+isDefault() : boolean
+isVarArgs() : boolean
}

interface PackageElement <<interface>> extends QualifiedNameable{
+asType() : TypeMirror
+getEnclosedElements() : List<? extends Element>
+getEnclosingElement() : Element
+getQualifiedName() : Name
+getSimpleName() : Name
+isUnnamed() : boolean
}

interface VariableElement <<interface>> extends Element{
+asType() : TypeMirror
+getConstantValue() : Object
+getEnclosingElement() : Element
+getSimpleName() : Name
}

interface ModuleElement <<interface>> extends Element{}

interface Parameterizable <<interface>> extends Element{
getTypeParameters() : List<? extends TypeParameterElement>
}

interface QualifiedNameable <<interface>> extends Element{
getQualifiedName() : Name
}

interface RecordComponentElement <<interface>> extends Element{}

interface TypeElement <<interface>> extends QualifiedNameable, Parameterizable{
+asType() : TypeMirror
+getEnclosedElements() : List<? extends Element>
+getEnclosingElement() : Element
+getInterfaces() : List<? extends TypeMirror>
+getNestingKind() : NestingKind
+getPermittedSubclasses() : default List<? extends TypeMirror>
+getQualifiedName() : Name
+getRecordComponents() : default List<? extends RecordComponentElement>
+getSimpleName() : Name
+getSuperclass() : TypeMirror
+getTypeParameters() : List<? extends TypeParameterElement>
}

enum NestingKind <<enum>> {
ANONYMOUS
LOCAL
MEMBER
TOP_LEVEL
}

interface TypeParameterElement <<interface>> extends Element{
+asType() : TypeMirror
+getBounds() : List<? extends TypeMirror>
+getEnclosingElement() : Element
+getGenericElement() : Element
}

Element .> ElementKind : --use++
Element .> Name : --use++
TypeElement .> NestingKind : --use++
ExecutableElement .> VariableElement : --use++
ExecutableElement .> TypeParameterElement : --use++
QualifiedNameable .> Name : --use++
Parameterizable .> TypeParameterElement : --use++
}


package javax.lang.model.type{

interface TypeMirror <<interface>>{
+equals(obj Object) : boolean
+hashCode() : int
+getKind() : TypeKind
+toString() : String
}

enum TypeKind <<enum>>{
ARRAY
BOOLEAN
BYTE
CHAR
DECLARED
DOUBLE
ERROR
EXECUTABLE
FLOAT
INT
LONG
NONE
NULL
PACKAGE
UNION
VOID
}
TypeMirror .> TypeKind : --use++
}


package javax.lang.model.util{

interface Elements <<interface>>{}

}

@enduml